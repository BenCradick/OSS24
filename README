# OSS24 

## Project 2

Targeting Ubuntu:focal


Runing project goes as follows:
````

#builds project
make

#removes .o and executables from the directory.
make clean

#prints help menu
./oss -h

# run the program
./oss -n NumberOfProcesses -s MaxConcurrentChildren -t Iterations -i MaxRuntime
````

Current configuration will produce a warning that argc isn't used, ignore it. It will also produce a warning about my use of #pragma region REGION_NAME and #pragma endregion, They are macros for the text editor I'm using to organize the code into collapsable regions, and won't be picked up by the precompiler. I don't rememember why I used #define BILLION in oss and const unsigned int BILLION in worker, ideally I will move all constants into a .h file at some point in the future.

I left the user .h and .c files in the repository and they are still compiled, but they aren't actually hit by the code, I'm just too lazy to clean them up. Additionally none of the .h files are actually utilized, but they will be whenever I rewrite project 3 in c++.

I will hard cap the number of concurrent children at 20 to be in line with opsys limitations.

It prints the process control block one more time after finishing just to show that it indeed empties out when the last child exits.


Otherwise nothing special was done in this project,  You can safely ignore everything in the .github, .devcontainer, and .vscode folders. I will still explain what they do later.

Youtube video of me walking you through the code can be found [here](https://www.youtube.com/watch?v=6-1Ue0FFrHY).

I used unsigned long longs for my clock timer, it simplified 




Explanation of weird folders.

.vscode folder: Contains instructions for the [VSCode](https://code.visualstudio.com/) editor to use for building and running project. Ultimately I did everythign from the command line as this wasn't quite complicated enough for me to bust out GDB.

.devcontainer folder: Folder that contains image instructions for the VSCode extension [Dev Containers](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers) there is a more in depth explanation [here](https://code.visualstudio.com/docs/devcontainers/containers) but its basically instructions for VSCode to spin up a [Docker](https://www.docker.com/) container then SSH into it, then pretend as if the entire editor is sitting inside the container. I'm developing across 3 machines and wanted a consistend development environment that was also identical to opsys. So containers.

.github: I don't know it just added it at somepoint.

It may be easier to see a log of my git commits here: https://github.com/BenCradick/OSS24/tree/Project-2

I developed this accross multiple machines and locations, and I'm not 100% sure if they all use the same Github account.


###### BenCradick
###### February 22 2024
